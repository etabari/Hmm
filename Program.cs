using System;
using System.Collections.Generic;
using System.Text;
using System.Linq;
using System.IO;
using Hmm;
using Hmm.Decoding;
using Hmm.Training;
using Hmm.Model;
using Hmm.Base;

namespace BaseHmm {


    class Program {

        static Random r = new Random();


        static DishonestCasino casino = new DishonestCasino();
        static int[] casinoSeq;
        static string casinoSeqStr = "";
        static IList<HmmState<int>> casinoPi;


        static DnaGenerator dnag = new DnaGenerator();
        static IList<char> dnaSeq;
        static IList<HmmState<char>> dnaPi;


        static IonChannel ionChannel = new IonChannel();
        static double[] ionTrainSet;
        static MarkovChain<double> ionChain;

        static IonChannel2 ionChannel2 = new IonChannel2();

        static void Main(string[] args) {
            //if (args.Length != 3) {
            //    Console.WriteLine("BaseHmm.exe [FILEPATH] 10000 60");
            //    Console.WriteLine("\t 10000 means use the first 10000 number to calculate");
            //    Console.WriteLine("\t 60 means do only 60 training steps over 60 explodes (don't know why)");
            //    Console.WriteLine("\t please give a number for last two arguments");
            //    Console.WriteLine("\t use > to send output to a file if you want");
            //    Console.WriteLine("press a key to exit");
            //    Console.ReadKey();
            //    return;
            //}

            //initiateDataforCasino();

            //TestDecoding();
            //TestSupervisedEstimation();

            //TestBaumWelch();

            //initiateDataForIonChannelTraining(args[0], int.Parse(args[1]));
            //IonChannelBaumWelch(int.Parse(args[2]));

            //initiateDataforDnaG();
            //TestDecodingforDnaG();

            //initiateDataforCasino();
            //TestDecodingforCasino();

            //initiateDataforIonChannel2();
            //TestDecodingforIon2();

            initiateDataforIonChannel();
            TestDecodingforIon();


            Console.WriteLine("Press a key to Exit...");
            // Console.ReadKey();
        }

        private static void initiateDataforCasino() {
            MarkovChain<int> mc = new MarkovChain<int>(casino);
            mc.Generate(30000);
            casinoSeq = mc.Sequence.ToArray();
            casinoPi = mc.TrueStates;
            //sq = new String((from int c in sq_i select c.ToString()[0]).ToArray());
            //sq
            //sq_i = (from char c in sq select int.Parse(c.ToString())).ToArray();
        }

        private static void initiateDataforDnaG() {
            MarkovChain<char> mc = new MarkovChain<char>(dnag);
            mc.Generate(10000);
            dnaSeq = mc.Sequence;
            dnaPi = mc.TrueStates;
        }


        private static void initiateDataForIonChannelTraining(string file, int linesToRead = 10000) {
            if (linesToRead > 1000000)
                linesToRead = 1000000;
            Console.WriteLine("Loading file: " + linesToRead + " records");
            ionTrainSet = new double[linesToRead];

            int lines = 0;

            StreamReader sr = File.OpenText(file);
            string line = sr.ReadLine();
            while (lines < linesToRead) {
                line = sr.ReadLine();
                if (line == null)
                    break;
                ionTrainSet[lines] = double.Parse(line.Split('\t')[1]);
                lines++;
            }
            sr.Close();
            Console.WriteLine("File loaded");
        }

        private static void initiateDataforIonChannel() {
            ionChain = new MarkovChain<double>(ionChannel);
            ionChain.Generate(100000);

        }

        private static void initiateDataforIonChannel2() {
            ionChain = new MarkovChain<double>(ionChannel2);
            ionChain.Generate(50000);

        }

        private static void IonChannelBaumWelch(int a) {
            FBDecoding<double> fb = new FBDecoding<double>(ionChannel);
            fb.Decode(ionTrainSet);

            PrintMatrices(ionChannel);
            Console.WriteLine(fb.LogPx);

            Console.WriteLine("=====================Train===============");
            BaumWelchContinuous bwt = new BaumWelchContinuous(ionChannel);
            bwt.AddTrainSet(ionTrainSet);
            for (int i = 1; i < a / 10; i++) {
                bwt.Train(10);
                Console.WriteLine("\n------------Iteration " + i * 10);
                PrintMatrices(ionChannel);
                Console.WriteLine(bwt.PValueLog);
            }
        }

        private static void TestBaumWelch() {
            FBDecoding<int> fb = new FBDecoding<int>(casino);
            fb.Decode(casinoSeq);

            PrintMatrices(casino);
            Console.WriteLine(fb.LogPx);
            Console.WriteLine("=====================Scramble===============");
            foreach (var state in casino.States) {
                double[] e = createArraySumsToOne(casino.Symbols.Count);
                for (int i = 0; i < casino.Symbols.Count; i++)
                    ((DiscreteStateEmissions<int>)casino.Emissions[state]).setProbability(casino.Symbols[i], e[i]);
                if (!casino.Emissions[state].IsCorrect())
                    Console.WriteLine("Bad Emission Parameters for " + state);
            }

            foreach (var s in casino.States)
                if (!(s is IHmmEndState)) {
                    double[] e = createArraySumsToOne(casino.States.Count - 1);
                    for (int i = 0; i < casino.States.Count - 1; i++)
                        casino.Transitions[s].setProbability(casino.States[i], e[i] - .00005);
                    if (!casino.Transitions[s].IsCorrect())
                        Console.WriteLine("Bad Transition Parameters from " + s);
                }
            //casino.Transitions[DishonestCasino.Fair].setProbability(DishonestCasino.Fair, 0.2576);
            //casino.Transitions[DishonestCasino.Fair].setProbability(DishonestCasino.Loaded, 0.7424);
            //casino.Transitions[DishonestCasino.Loaded].setProbability(DishonestCasino.Fair, 0.0161  );
            //casino.Transitions[DishonestCasino.Fair].setProbability(DishonestCasino.Loaded, 0.9839);

            PrintMatrices(casino);

            fb = new FBDecoding<int>(casino);
            fb.Decode(casinoSeq);
            Console.WriteLine(fb.LogPx);
            Console.WriteLine("=====================Train===============");
            BaumWelchDiscrete<int> bwt = new BaumWelchDiscrete<int>(casino);
            bwt.AddTrainSet(casinoSeq);
            for (int i = 1; i < 100; i++) {
                bwt.Train(10);
                Console.WriteLine("\n------------Iteration " + i * 10);
                PrintMatrices(casino);
                Console.WriteLine(bwt.PValueLog);
            }
        }

        private static double[] createArraySumsToOne(int len) {
            double[] arr = new double[len];
            double sum = 0;
            for (int i = 0; i < arr.Length; i++) {
                arr[i] = r.NextDouble();
                sum += arr[i];
            }
            for (int i = 0; i < arr.Length; i++)
                arr[i] /= sum;
            return arr;
        }

        private static void Test2() {
            //PrintMatrices();
            //foreach (var a in mc.Sequence)
            //    Console.Write(a);
            //Console.WriteLine();
            //foreach (var a in mc.TrueStates)
            //    Console.Write(a);

            //foreach (var state in casino.States) {
            //    Console.WriteLine(state);
            //    foreach (var item in vit.LogPobabilities[state]) {
            //        Console.WriteLine(Math.Exp(item));
            //    }
            //}

            //foreach (var a in vit.PredictedStatePath)
            //    Console.Write(a);


            //var data = casino.Emissions[casino.States[0]].data;

            //foreach (var am in from s in casino.Symbols orderby s select s)
            //    Console.WriteLine(am.ToString() + " --> " + casino.Emissions[casino.States[0]][am]);

            //for (double prob = 0.0; prob <= 1.1; prob += .05) {
            //    Console.WriteLine("=================" + prob);
            //    var a = from e in data
            //            where e.Value.Probability > 0.0 && e.Value.Cdf >= prob
            //            orderby e.Key
            //            select e.Key;

            //    if (a.Count() > 0)
            //        Console.WriteLine(a.First());
            //    else {
            //        a = from e in data
            //            where e.Value.Probability > 0.0
            //            orderby e.Key descending
            //            select e.Key;

            //        Console.WriteLine("==="+a.First());
            //    }
            //}
        }

        private static void TestSupervisedEstimation() {

            PrintMatrices(casino);
            MarkovChain<int> mc = new MarkovChain<int>(casino);

            //string sq = "221264643165244666254366666551662666664645332543133566666165366466666555235665514444426153656231";
            //string pi = "FFFFFFFFFFFFFFFFFFFFFFLLLLLLLLLLLLLLLLLLLLLLFFFFFFFFFFFFLLLLLLLLLLLLLLLLLLLFFFFFFFFFFFFFFFFFFFFF";



            int[] fcount = new int[7];
            int[] lcount = new int[7];
            for (int i = 0; i < casinoSeqStr.Length; i++) {
                if (casinoPi[i] == DishonestCasino.Fair)
                    fcount[int.Parse(casinoSeqStr[i].ToString())]++;
                else
                    lcount[int.Parse(casinoSeqStr[i].ToString())]++;

            }
            int ff = 0, fl = 0, ll = 0, lf = 0;
            for (int i = 0; i < casinoSeqStr.Length - 1; i++) {
                if (casinoPi[i] == DishonestCasino.Fair) {
                    if (casinoPi[i + 1] == DishonestCasino.Fair)
                        ff++;
                    else fl++;
                }


                else {
                    if (casinoPi[i + 1] == DishonestCasino.Fair)
                        lf++;
                    else ll++;
                }


            }
            Console.WriteLine("FCOUNT");
            foreach (var a in fcount)
                Console.WriteLine(1.0 * a / fcount.Sum());
            Console.WriteLine("LCOUNT");
            foreach (var a in lcount)
                Console.WriteLine(1.0 * a / lcount.Sum());
            Console.WriteLine(casinoSeqStr.Length);
            Console.WriteLine("{0},{1} ... {2} {3}", 1.0 * ff / (ff + fl), 1.0 * fl / (ff + fl), 1.0 * ll / (lf + ll), 1.0 * lf / (lf + ll));

            Console.WriteLine("{0},{1} ... {2} {3}", ff, fl, ll, lf);
        }


        public static void TestDecodingforCasino() {
            PrintMatrices(casino);
            //MarkovChane<int> mc = new MarkovChane<int>(casino);

            //sq_i = new int[] { 6,3,4,5,6,6,5 };
            ViterbiDecoding<int> vit = new ViterbiDecoding<int>(casino);
            vit.Decode(casinoSeq);

            FBDecoding<int> fb = new FBDecoding<int>(casino);

            fb.Decode(casinoSeq);


            StreamWriter swriter;
            swriter = File.CreateText("D:\\Temp\\MyTextFile2DC.txt");
            swriter.WriteLine("i,pi,Obs,vit,Posterior1,Posterior2");
            for (int i = 0; i < casinoSeq.Length; i++) {
                swriter.WriteLine(i.ToString() + "," + casinoPi[i] + "," +
                    casinoSeq[i] + "," + fb.PredictedStatePath[i] + "," +
                    Math.Exp(fb.LogPobabilities[casino.States[0]][i]).ToString() + "," +
                    Math.Exp(fb.LogPobabilities[casino.States[1]][i]).ToString()
                    );
            }
            swriter.Close();
        }


        public static void TestDecodingforDnaG() {
            PrintMatrices(dnag);

            ViterbiDecoding<char> vit = new ViterbiDecoding<char>(dnag);
            vit.Decode(dnaSeq);


            FBDecoding<char> fb = new FBDecoding<char>(dnag);

            fb.Decode(dnaSeq);


            StreamWriter swriter;
            swriter = File.CreateText("D:\\Temp\\MyTextFile2DNA.txt");
            swriter.WriteLine("i,pi,Obs,vit,Posterior1,Posterior2,Posterior3");
            for (int i = 0; i < dnaSeq.Count; i++) {
                swriter.WriteLine(i.ToString() + "," + dnaPi[i] + "," +
                    dnaSeq[i] + "," + fb.PredictedStatePath[i] + "," +
                    Math.Exp(fb.LogPobabilities[dnag.States[0]][i]).ToString() + "," +
                    Math.Exp(fb.LogPobabilities[dnag.States[1]][i]).ToString() + "," +
                    Math.Exp(fb.LogPobabilities[dnag.States[2]][i]).ToString()
                    );
            }
            swriter.Close();
        }

        public static void TestDecodingforIon2() {
            PrintMatrices(ionChannel2);

            //ViterbiDecoding<double> vit = new ViterbiDecoding<double>(ionChannel2);
            //vit.Decode(ionChain.Sequence);


            FBDecoding<double> fb = new FBDecoding<double>(ionChannel2);

            fb.Decode(IonChannel2Data.sampleData);

            Console.WriteLine(fb.LogPx);
            Console.WriteLine(Math.Exp(fb.LogPx));

            StreamWriter swriter;
            swriter = File.CreateText("D:\\Temp\\MyTextFile2Ion2.txt");
            swriter.WriteLine("i,pi,Obs,vit,C,O");
            for (int i = 0; i < IonChannel2Data.sampleData.Length; i++) {
                swriter.WriteLine(i.ToString() + "," + IonChannel2Data.truePath[i] + "," +
                    IonChannel2Data.sampleData[i] + "," + fb.PredictedStatePath[i] + "," +
                    Math.Exp(fb.LogPobabilities[ionChannel2.States[0]][i]).ToString() + "," +
                    Math.Exp(fb.LogPobabilities[ionChannel2.States[1]][i]).ToString()
                    );
            }
            swriter.Close();
        }


        public static void TestDecodingforIon() {
            PrintMatrices(ionChannel);

            ViterbiDecoding<double> vit = new ViterbiDecoding<double>(ionChannel);
            vit.Decode(ionChain.Sequence);


            FBDecoding<double> fb = new FBDecoding<double>(ionChannel);

            fb.Decode(ionChain.Sequence);


            StreamWriter swriter;
            swriter = File.CreateText("D:\\Temp\\MyTextFile2Ion.txt");
            swriter.WriteLine("i,pi,pi.hat,Obs,Close,B,P,O,Q,Burst,Open");
            for (int i = 0; i < ionChain.Sequence.Count; i++) {
                swriter.WriteLine(i.ToString() + "," + 
                    ionChain.TrueStates[i] + "," +
                    fb.PredictedStatePath[i] + "," +
                    ionChain.Sequence[i] + "," + 
                    Math.Exp(fb.LogPobabilities[ionChannel.States[0]][i]).ToString() + "," +
                    Math.Exp(fb.LogPobabilities[ionChannel.States[1]][i]).ToString() + "," +
                    Math.Exp(fb.LogPobabilities[ionChannel.States[2]][i]).ToString() + "," +
                    Math.Exp(fb.LogPobabilities[ionChannel.States[3]][i]).ToString() + "," +
                    Math.Exp(fb.LogPobabilities[ionChannel.States[4]][i]).ToString() + "," +


                    (Math.Exp(fb.LogPobabilities[ionChannel.States[1]][i]) +
                     Math.Exp(fb.LogPobabilities[ionChannel.States[2]][i])).ToString() + "," +

                    (Math.Exp(fb.LogPobabilities[ionChannel.States[3]][i]) +
                     Math.Exp(fb.LogPobabilities[ionChannel.States[4]][i])).ToString()

                    );
            }
            swriter.Close();

            swriter = File.CreateText("D:\\Temp\\MyTextFile2Ion_forward.txt");
            swriter.WriteLine("i,pi,Obs,vit,C,P,O,Q");
            for (int i = 0; i < ionChain.Sequence.Count; i++) {
                swriter.WriteLine(i.ToString() + "," + ionChain.TrueStates[i] + "," +
                    ionChain.Sequence[i] + "," + fb.PredictedStatePath[i] + "," +
                    Math.Exp(fb.LogForward[ionChannel.States[0]][i]).ToString() + "," +
                    Math.Exp(fb.LogForward[ionChannel.States[1]][i]).ToString() + "," +
                    Math.Exp(fb.LogForward[ionChannel.States[2]][i]).ToString() + "," +
                    Math.Exp(fb.LogForward[ionChannel.States[3]][i]).ToString() + "," +
                    Math.Exp(fb.LogForward[ionChannel.States[4]][i]).ToString()
                    );
            }
            swriter.Close();
        }




        private static void PrintMatrices<T>(BaseMarkovModel<T> model) where T : IEquatable<T>, IComparable<T> {
            Console.WriteLine("Transition Probabilities:");
            Console.WriteLine(model.Transitions);
            Console.WriteLine("\nEmission Probabilities:");
            Console.WriteLine(model.Emissions);
            Console.WriteLine();
        }


    }
}

